palette<-c(palette, cl[ii])
lines(pm1[,1], pm1[,5], col=palette[i+1])
}
legend(x="bottomright", legend=c("f",e), col=palette, lty=1, cex=0.5, seg.len=0.5) #, inset=c(-0.15,0)
pm<-powermatrix
pm<-pm[-1,]
pm<-subset(pm, pm[,4]==0.1) ##fix f
plot(pm[,1], pm[,5], main=paste("Locus Level Power by matching distance (s)\ns=", pm[,2][1]," p<", round(fp,7), sep=""), xlab="sample size n-pairs", ylab="power (percent)", type="n")
palette<-c("white", "black", "brown", "darkred", "red", "orange", "green", "blue")
cl<-colors()
cl<-cl[-c(153:252)]
for (i in 1:length(s)) {
pm1<-subset(pm, pm[,2]==s[i])
if (i>7) {
ii<-i*5
}
palette<-c(palette, cl[ii])
lines(pm1[,1], pm1[,5], col=palette[i+1])
}
legend(x="bottomright", legend=c("s",s), col=palette, lty=1, cex=0.5, seg.len=0.5) #, inset=c(-0.15,0)
pm<-powermatrix
pm<-pm[-1,]
pm<-subset(pm, pm[,4]==0.1) ##fix f
plot(pm[,1], pm[,5], main=paste("Locus Level Power by matching distance (s)\ns=", pm[,2][1]," p<", round(fp,7), sep=""), xlab="sample size n-pairs", ylab="power (percent)", type="n")
palette<-c("white", "black", "brown", "darkred", "red", "orange", "green", "blue")
cl<-colors()
cl<-cl[-c(153:252)]
for (i in 1:length(s)) {
pm1<-subset(pm, pm[,2]==s[i])
if (i>7) {
ii<-i*5
} else {
ii<-i
}
palette<-c(palette, cl[ii])
lines(pm1[,1], pm1[,5], col=palette[i+1])
}
legend(x="bottomright", legend=c("s",s), col=palette, lty=1, cex=0.5, seg.len=0.5) #, inset=c(-0.15,0)
X <- matrix(c(1,0,1,1,0,2,1,0,-1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,2,2,1,
1,0,1,1,0,2,1,0,-1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,2,0,-1,0,1,0,0,1,1,1,2,1,0,
1,0,1,0,1,2,0,-1,0,1,0,1,0,1,2,0,-1,0,1,0,0,1,1,1,2,1,0,
1,1,0,1,0,0,2,2,1,1,0,1,0,1,2,0,-1,0),byrow=TRUE,nrow=12)
X
Y<-c(54,47,18,68,77,74,68,67,76,43,34,68)
length(Y)
length(X)
nrow(X)
svd(X)
svd(X)$v
eigen(t(X)%*%X)
eigen(X%*%t(X))
svd(X)$v
svd(X)$d
svd(X)$v[seq(1,5,1),]
svd(X)$v[,seq(1,5,1)]
svd(cbind(svd(X)$v[,seq(1,5,1)],c(1,rep(0,8)))$d
)
svd(cbind(svd(X)$v[,seq(1,5,1)],c(1,rep(0,8))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,1),1,rep(0,7))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,2),1,rep(0,6))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,3),1,rep(0,5))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,4),1,rep(0,4))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,5),1,rep(0,3))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,6),1,rep(0,2))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,7),1,rep(0,1))))$d
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,8),1))$d
)
svd(cbind(svd(X)$v[,seq(1,5,1)],c(rep(0,8),1)))$d
library(MASS
)
ginv(t(X)%*%X)%*%t(X)%*%Y
svd(cbind(svd(X)$v[,seq(1,5,1)],c(1,0,1,0,1,2,0,-1,0)))$d
t(c(1,0,1,0,1,2,0,-1,0))%*%ginv(t(X)%*%X)%*%t(X)%*%Y
t(c(1,0,1,0,1,2,0,-1,0))%*%ginv(t(x)%*%X)%*%c(1,0,1,0,1,2,0,-1,0)
t(c(1,0,1,0,1,2,0,-1,0))%*%ginv(t(x)%*%X)%*%t(c(1,0,1,0,1,2,0,-1,0))
t(c(1,0,1,0,1,2,0,-1,0))%*%ginv(t(x)%*%X)
ginv(t(x)%*%X)
t(c(1,0,1,0,1,2,0,-1,0))%*%ginv(t(X)%*%X)%*%t(c(1,0,1,0,1,2,0,-1,0))
t(c(1,0,1,0,1,2,0,-1,0))%*%ginv(t(X)%*%X)%*%c(1,0,1,0,1,2,0,-1,0)
ginv(t(X)%*%X)%*%t(X)%*%Y
beta<-ginv(t(X)%*%X)%*%t(X)%*%Y
Y-X%*%beta
t(Y-X%*%beta)%*%(Y-X%*%beta)
H<-rbind(c(0,rep(1,8)), c(0,1,0,-1,0,0,1,0,-1))
H
t(H)
svd(H)
svd(H%*%t(H))
svd(t(H)%*%H)
eigen(t(H)%*%H)
eigen(t(H)%*%H)[,seq(3,9,1)]
eigen(t(H)%*%H)$vectors[,seq(3,9,1)]
eigen(t(H)%*%H)$v[,seq(3,9,1)]
X%*%eigen(t(H)%*%H)$vectors[,seq(3,9,1)]
W<-X%*%eigen(t(H)%*%H)$vectors[,seq(3,9,1)]
svd(W)
svd(t(W))
svd(cbind(t(W), c(1,rep(0,6)))
)
svd(cbind(t(W), c(0,1,rep(0,5))))
svd(cbind(t(W), c(0,0,1,rep(0,4))))
svd(cbind(t(W), c(0,0,0,1,rep(0,3))))
svd(cbind(t(W), c(0,0,0,0,1,rep(0,2))))
svd(cbind(t(W), c(0,0,0,0,0,1,rep(0,1))))
svd(cbind(t(W), c(0,0,0,0,0,0,1)))
eigen(t(H)%*%H)$vectors[,seq(3,9,1)]
B<-cbind(c(1,rep(0,8)), c(0,1,0,0,0,0,0,-2,1), c(0,0,1,0,0,0,0,-1,0), c(0,0,0,1,0,0,0,0,-1), c(0,0,0,0,1,0,0,-1,0), c(0,0,0,0,0,1,0,-1,0), c(0,0,0,0,0,0,1,-2,1))
B
X%*%B
t(X%*%B)
svd(t(X%*%B))
X%*%B
t(X%*%B)
rbind(t(X%*%B), c(1,seq(0,6)))
rbind(t(X%*%B), c(1,rep(0,6)))
cbind(t(X%*%B), c(1,rep(0,6)))
svd(cbind(t(X%*%B), c(1,rep(0,6))))
svd(cbind(t(X%*%B))
)
svd(cbind(t(X%*%B), c(1,rep(0,6))))
svd(cbind(t(X%*%B), c(rep(0,1),1,rep(0,4))))
svd(cbind(t(X%*%B), c(rep(0,1),1,rep(0,5))))
svd(cbind(t(X%*%B), c(rep(0,2),1,rep(0,4))))
svd(cbind(t(X%*%B), c(rep(0,3),1,rep(0,3))))
svd(cbind(t(X%*%B), c(rep(0,4),1,rep(0,2))))
svd(cbind(t(X%*%B), c(rep(0,5),1,rep(0,1))))
svd(cbind(t(X%*%B), c(rep(0,6),1,)))
svd(cbind(t(X%*%B), c(rep(0,6),1)))
W<-X%*%B
W
eigen(t(W)%*%W)
eigen(t(X)%*%X)
W
ginv(t(W)%*%W)%*%W%*%Y
ginv(t(W)%*%W)
ginv(t(W)%*%W)%*%t(W)%*%Y
(Y-W%*%ginv(t(W)%*%W)%*%t(W)%*%Y)
t(Y-W%*%ginv(t(W)%*%W)%*%t(W)%*%Y)%*%(Y-W%*%ginv(t(W)%*%W)%*%t(W)%*%Y)
t(Y-X%*%ginv(t(X)%*%X)%*%t(X)%*%Y)%*%(Y-X%*%ginv(t(X)%*%X)%*%t(X)%*%Y)
c_star<-c(1,2,2,0,2,3,2)
gamma<-ginv(t(W)%*%W)%*%t(W)%*%Y
cbind(t(W),c_star)
svd(cbind(t(W),c_star) )
svd(t(W))
t(c_star)%*%gamma
t(c_star)%*%ginv(t(W)%*%W)%*%c_star
H
A_s<-rbind(H, c(0,1,0,1,0,-1,1,-2,0), c(0,0,1,0,1,1,-1,-1,-1))
A_s
svd(cbind(t(X), t(A_s))
)
svd(A_s)
eigen(A_s%*%t(A_s))
svd(A_s)
svd(t(A_s)
)
svd(t(A_s))
svd(A_s)
eigen(t(A_s)%*%A_s)
eigen(t(A_s)%*%A_s)
?eigen
?svd
svd(A_s)
eigen(A_s%*%t(A_s))
rbind(A_s, rep(0,9), rep(0,9), rep(0,9), rep(0,9), rep(0,9))
svd(A_s)
tr<-rbind(A_s, rep(0,9), rep(0,9), rep(0,9), rep(0,9), rep(0,9))
svd(tr)
svd(A-s)
svd(A_s)
svd(cbind(A_s, svd(tr)$v[,c(5,6,7,8,9)]))
svd(tr)$v[,c(5,6,7,8,9)]
svd(tr)
svd(A_s)
tr
svd(A_s)$v
svd(A_s%*%t(A_s))
svd(tr%*%t(tr))
svd(t(A_s))
svd(A_s)
svd(t(A_s)%*%A_s)
eigen(t(A_s)%*%A_s)
B
A_s
D<-eigen(t(A_s)%*%A_s)$vectors[0,seq(5,9,1)]
D
eigen(t(A_s)%*%A_s)$vectors
eigen(t(A_s)%*%A_s)$vectors[,5]
eigen(t(A_s)%*%A_s)$vectors[,c(5,6,7,8,9)]
D<-eigen(t(A_s)%*%A_s)$vectors[,c(5,6,7,8,9)]
D
X%*%D
svd(X%*%D)
V<-X%*%D
ginv(t(V)%*%V)%*%t(V)%*%Y
eigen(X)
svd(X)
svd(W)
A
A_s
A_s[c(2,3),]
A<-A_s[c(2,3),]
A<-A_s[c(3,4),]
A
gamma
t(A%*%gamma)
gamma<-c(gamma,1.95,-9.21)
t(A%*%gamma)
t(A%*%gamma)%*%ginv(A%*%ginv(t(W)%*%W)%*%t(A))%*%A%*%gamma
ginv(A%*%ginv(t(W)%*%W)%*%t(A))
ginv(t(W)%*%W)
ginv(t(W)%*%W)%*%t(A)
A
H
cbind(t(X), t(H))
svd(cbind(t(X), t(H)))
svd(H)
D
X%*%D%*%ginv(t(X%*%D)%*%X%*%D)t(X%*%D)%*%Y
(X%*%D)%*%ginv(t(X%*%D)%*%X%*%D)t(X%*%D)%*%Y
(X%*%D)
(X%*%D)%*%ginv(t(X%*%D)%*%X%*%D)%*%t(X%*%D)%*%Y
t((X%*%D)%*%ginv(t(X%*%D)%*%X%*%D)%*%t(X%*%D)%*%Y)%*%(X%*%D)%*%ginv(t(X%*%D)%*%X%*%D)%*%t(X%*%D)%*%Y
t((X%*%B)%*%ginv(t(X%*%B)%*%X%*%B)%*%t(X%*%B)%*%Y)%*%(X%*%B)%*%ginv(t(X%*%B)%*%X%*%B)%*%t(X%*%B)%*%Y
B
X%*%B
W
t((W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y)%*%(W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y
t((W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y)%*%(W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y
t(Y-X%*%ginv(t(X)%*%X)%*%t(X)%*%Y)%*%(Y-X%*%ginv(t(X)%*%X)%*%t(X)%*%Y)
t(Y-W%*%ginv(t(W)%*%W)%*%t(W)%*%Y)%*%(Y-W%*%ginv(t(W)%*%W)%*%t(W)%*%Y)
(W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y
Y-(W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y
t(Y-(W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y)%*%(Y-(W)%*%ginv(t(W)%*%W)%*%t(W)%*%Y)
t(Y-(V)%*%ginv(t(V)%*%V)%*%t(V)%*%Y)%*%(Y-(V)%*%ginv(t(V)%*%V)%*%t(V)%*%Y)
svd(cbind(t(X), t(A_s)))
svd(t(A_s))
t(Y-(V)%*%ginv(t(V)%*%V)%*%t(V)%*%Y)%*%(Y-(V)%*%ginv(t(V)%*%V)%*%t(V)%*%Y)
t(Y-(V)%*%ginv(t(V)%*%V)%*%t(V)%*%Y)%*%(Y-(V)%*%ginv(t(V)%*%V)%*%t(V)%*%Y)-1137.39
1221.403/1137.79
1221.403*7/1137.79
12-5
svd(A_s)
svd(H)
svd(A)
svd(cbind(t(X), t(H)))
svd(cbind(t(X), t(A_s)))
svd(A_s)
ginv(t(X)%*%X)
svd(ginv(t(X)%*%X))
Sig<-10*diag(12)
Sig[cbind(2:12,1:11)]<-Sig[cbind(1:11,2:12)]<-5
Sig[cbind(3:12,1:10)]<-Sig[cbind(1:10,3:12)]<-1
Sig
cbind(t(X), t(H))
svd(cbind(t(X), t(H)))
svd(cbind(t(X), t(H), c(rep(0,1),1,rep(0,7))))
svd(cbind(t(X), t(H), c(1,rep(0,8))))
svd(cbind(t(X), t(H), c(rep(0,2),1,rep(0,6))))
svd(cbind(t(X), t(H), c(rep(0,3),1,rep(0,5))))
svd(cbind(t(X), t(H), c(rep(0,4),1,rep(0,4))))
svd(cbind(t(X), t(H), c(rep(0,5),1,rep(0,3))))
svd(cbind(t(X), t(H), c(rep(0,6),1,rep(0,2))))
svd(cbind(t(X), t(H), c(rep(0,7),1,rep(0,1))))
svd(cbind(t(X), t(H), c(rep(0,8),1)))
svd(cbind(t(X),t(H)))
ginv(t(X)%*%solve(Sig)%*%X)%*%t(X)%*%solve(Sig)%*%Y
c(1,0,1,0,1,2,0,-1,0)%*%ginv(t(X)%*%solve(Sig)%*%X)%*%t(X)%*%solve(Sig)%*%Y
ginv(t(X)%*%solve(Sig)%*%X)
c(1,0,1,0,1,2,0,-1,0)%*%ginv(t(X)%*%solve(Sig)%*%X)%*%t(c(1,0,1,0,1,2,0,-1,0))
c(1,0,1,0,1,2,0,-1,0)%*%ginv(t(X)%*%solve(Sig)%*%X)
c(1,0,1,0,1,2,0,-1,0)%*%ginv(t(X)%*%solve(Sig)%*%X)%*%c(1,0,1,0,1,2,0,-1,0)
ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y
1.79-2.084-12.965
sum(ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y[2:7])
sum((ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y)[2:7])
sum((ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y)[2:7])-13.259
ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y
beta<-c(ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y, 5.8,-13.2)
beta
c(1,0,1,0,1,2,0,-1,0)%*%beta
c(1,2,2,0,2,3,2)%*%ginv(t(W)%*%solve(Sig)%*%W)%*%c(1,2,2,0,2,3,2)
Y-W%*%ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y
t(Y)%*%(V%*%ginv(t(V)%*%solve(Sig)%*%V)%*%t(V)%*%solve(Sig)-W%*%ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig))%*%Y
W
X%*%B
V
X%*%D
D
V%*%ginv(t(V)%*%solve(Sig)%*%V)%*%t(V)%*%solve(Sig)
V%*%ginv(t(V)%*%solve(Sig)%*%V)%*%t(V)%*%solve(Sig)%*%Y
Y-V%*%ginv(t(V)%*%solve(Sig)%*%V)%*%t(V)%*%solve(Sig)%*%Y
t(Y-V%*%ginv(t(V)%*%solve(Sig)%*%V)%*%t(V)%*%solve(Sig)%*%Y)%*%(Y-V%*%ginv(t(V)%*%solve(Sig)%*%V)%*%t(V)%*%solve(Sig)%*%Y)
t(Y-W%*%ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y)%*%(Y-W%*%ginv(t(W)%*%solve(Sig)%*%W)%*%t(W)%*%solve(Sig)%*%Y)
(2607.178-1281.806)*7/1281.806
arg <- commandArgs(trailingOnly = TRUE)
#aa <- Sys.time()
library(foreign)
library(jsonlite, quietly=TRUE)
suppressPackageStartupMessages(library("randomForest"))
library(htmlwidgets, quietly=TRUE)
library(reshape2, quietly=TRUE)
library(d3heatmap, quietly=TRUE)
library(colorRamps, quietly=TRUE)
create_heatmap <- function(file_json) {
l <- fromJSON(txt = readLines(file_json))
d <- data.frame(l[[1]])[, 1:3]
names(d) <- c("strain", "drug","probability_of_resistance")
dd <- dcast(d, drug ~ strain)
rownames(dd) <- dd$drug
for (j in 2:ncol(dd)) {
dd[, j] <- as.numeric(dd[, j])
}
dd <- dd[, -1]
dd <- t(dd)
dd <- as.data.frame(dd)
druglist <- c('inh','rif','pza', 'emb','str','eth','kan', 'cap', 'amk', 'cip', 'levo', 'oflx', 'pas')
dd <- dd[, druglist]
return(d3heatmap(dd, dendrogram = NULL, Rowv = FALSE, Colv = FALSE, colors = colorRamps::matlab.like(10)))
}
predictfunction<-function(filename){
set.seed(5414)
druglist <- c('inh','rif','pza', 'emb','str','eth','kan', 'cap', 'amk', 'cip', 'levo', 'oflx', 'pas')
greplist <- c('inhA|katG|embB|ahpC|ini|kasA|mabA|ndh|oxyR', 'rpoB', 'pncA', 'emb|ini', 'rpsL|gid|rrs', 'ethA|inhA|fabG1', 'rrs|tlyA', 'tlyA|rrs|rrl', 'tlyA|rrs|rrl', 'gyr', 'gyr', 'gyr','thyA')
input <- read.csv(filename, header=TRUE)
result<-matrix(NA,nrow=1,ncol=5, dimnames=list(c(), c('strain','drug','probability of resistance','False negative percent', 'False positive percent')))
important<-vector("list", nrow(input))
names(important)<-input[,1]
other<-vector("list",nrow(input))
names(other)<-input[,1]
for ( j in 1:nrow(input)){
strain <- input[j,]
resultperstrain <- matrix(NA, nrow=length(druglist), ncol=5)
important_strain<-matrix(NA,nrow=5,ncol=length(druglist),dimnames=list(c(), druglist))
other_strain<-matrix(NA, nrow=5,ncol=length(druglist),dimnames=list(c(),druglist))
for (i in 1:length(druglist)){
drug <- druglist[i]
load(paste(drug, "_finalpredict.RData", sep="")) #contains for each drug:
#drugg.full   :   matrix of all data
#drugg.full.rf:   a RF classifier
#eR           :   OOB false negative rate (For resistance classification)
#eS           :   OOB false positive rate (For resistance classification)
#selected     :   important variables for resistance prediction in order of their prediction importance
#filtering nonsyn mutations in genes of interest for each drug, it's not really necessary but may add speed
muts <- grep(greplist[i],colnames(strain))
nonsynmuts <- grep('CS', invert=TRUE, colnames(strain))
vars <- strain[,intersect(nonsynmuts, muts)]
Valid <- predict(drugg.full.rf, vars, type="prob", norm.votes=TRUE, predict.all=FALSE)
resultperstrain[i,] <- c(as.vector(strain[1,1]), drug, round(Valid[1,1],3), round(eR,2), round(eS,2))
imp<-intersect(selected, colnames(strain)[which(strain[1,]==1)])[1:5]
important_strain[1:length(imp),i]<-imp
oth<-setdiff(intersect(selected, colnames(strain)[which(strain[1,]==1)]), colnames(strain)[which(strain[1,]==1)])[1:5]
other_strain[1:length(oth),i]<-oth
}
result<-rbind(result, resultperstrain)
important[[j]]<-important_strain
other[[j]]<-other_strain
}
#print(length(warnings()))
#warnings()
#bb <- Sys.time()
#print("Time to completion:")
#print(bb-aa)
result<-result[-1,] #removing empty first line
#displayresult<- jsonlite:::toJSON(result)
#return(displayresult)
l <- list(result, important, other)
## Save JSON file
file_noext <- substr(basename(filename), 1, nchar(filename) - 4)
cat(toJSON(l, pretty = TRUE), "\n", file = paste0(file_noext, ".json"))
h<-create_heatmap(paste0(file_noext, ".json"))
htmlwidgets::saveWidget(h, paste0(file_noext, ".html"))
return(h)
#return(important)
#return(other)
}
setwd("C:/Users/Maha/Desktop/PhthisisRavens/R")
arg<-'matrix.csv'
suppressWarnings(predictfunction(arg))
rversion
r--version
Rversion
R.version()
R.version
file_json<-'matrix.json'
l <- fromJSON(txt = readLines(file_json))
d <- data.frame(l[[1]])[, 1:3]
names(d) <- c("strain", "drug","probability_of_resistance")
dd <- dcast(d, drug ~ strain)
rownames(dd) <- dd$drug
for (j in 2:ncol(dd)) {
dd[, j] <- as.numeric(dd[, j])
}
dd <- dd[, -1]
dd <- t(dd)
dd <- as.data.frame(dd)
druglist <- c('inh','rif','pza', 'emb','str','eth','kan', 'cap', 'amk', 'cip', 'levo', 'oflx', 'pas')
dd
dd[,druglist]
dd[druglist,]
selected_drug <- "inh"
selected_strain <- "01-R1466"
file_json<-'matrix.json'
create_scatterplot<-function(file_json, selected_drug, selected_strain) {
##----- Drug list
drug_list <- c('inh','rif','pza', 'emb','str','eth','kan', 'cap',
'amk', 'cip', 'levo', 'oflx', 'pas')
##----- Genetic region by drug
gr <- list() # genetic region
gr$inh <- c("katG", "inhA-promoter", "embB", "inhA", "iniB",
"kasA", "ahpC", "embAB-promoter", "fabG1", "ndh", "oxyR")
gr$rif <- c("rpoB")
gr$pza <- c("pncA", "pncA-promoter")
gr$emb <- c("embB", "embA", "embC", "embAB-promoter", "iniB", "iniA", "iniC")
gr$str <- c("rpsL", "rrs", "gid", "rrs-rrl-promoter")
gr$eth <- c("inhA-promoter", "ethA", "inhA", "fabG1")
gr$kan <- c("rrs", "tlyA", "rrs-rrl-promoter")
gr$cap <- c("rrs", "tlyA", "rrs-rrl-promoter")
gr$amk <- c("rrs", "tlyA", "rrs-rrl-promoter")
gr$cip <- c("gyrA", "gyrB")
gr$levo <- c("gyrA", "gyrB")
gr$oflx <- c("gyrA", "gyrB")
gr$pas <- c("thyA")
##----- Read predict output from JSON file
l <- fromJSON(txt = readLines(file_json))
##----- Important mutations
important_mutations <- l[[2]]
##----- Construct important mutation matrix
matrix_important_mutations <- NULL
for (i in 1:length(important_mutations)) {
mat <- data.frame(important_mutations[[i]])
colnames(mat) <- drug_list
mat <- gather(mat, drug, mutation, inh:pas)
mat <- mat[!is.na(mat$mutation), ]
mat$strain <- names(important_mutations[i])
for (i in 1:nrow(mat))
mat$genetic_region[i] <- tail(strsplit(as.character(mat$mutation)[i], "_")[[1]], 1)
matrix_important_mutations <- rbind(matrix_important_mutations, mat)
}
#matrix_important_mutations
##----- OTHER
##----- Other mutations
other_mutations <- l[[3]]
##----- Construct other mutation matrix
matrix_other_mutations <- NULL
for (i in 1:length(other_mutations)) {
mat <- data.frame(other_mutations[[i]])
colnames(mat) <- drug_list
mat <- gather(mat, drug, mutation, inh:pas)
# mat <- mat[!is.na(mat$mutation), ]
mat$strain <- names(other_mutations[i])
for (i in 1:nrow(mat))
mat$genetic_region[i] <- tail(strsplit(as.character(mat$mutation)[i], "_")[[1]], 1)
matrix_other_mutations <- rbind(matrix_other_mutations, mat)
}
#matrix_other_mutations
##----- Loop on strain and drug
for (selected_drug in drug_list) {
for (selected_strain in names(important_mutations)) {
##----- Create a count matrix
count_important <- data.frame(matrix(gr[[selected_drug]],length(gr[[selected_drug]])))
colnames(count_important) <- "genetic_region"
count_important$count <- 0
count_important$tip <- 0
##----- Subset by strain and drug
selected_important <- subset(matrix_important_mutations,strain == selected_strain & drug == selected_drug)
for (i in 1:nrow(count_important)) {
ss <- subset(selected_important, genetic_region == count_important$genetic_region[i])
count_important$count[[i]] <- nrow(ss)
count_important$tip[[i]] <- paste(ss$mutation, collapse = ", ")
}
count_important$drug <-  selected_drug
count_important$strain <- selected_strain
##----- Subset by strain and drug
selected_other <- subset(matrix_other_mutations,strain == selected_strain & drug == selected_drug)
##----- Create a count matrix
count_other <- data.frame(matrix(gr[[selected_drug]],length(gr[[selected_drug]])))
colnames(count_other) <- "genetic_region"
count_other$count <- 0
count.fields_other$tip <- 0
for (i in 1:nrow(count_other)) {
ss <- subset(selected_other, genetic_region == count_other$genetic_region[i])
count_other$count[[i]] <- nrow(ss)
count_other$tip[[i]] <- paste(ss$mutation, collapse = ", ")
}
count_other$drug <-  selected_drug
count_other$strain <- selected_strain
##----- Combine IMPORTANT and OTHER
count_important$type <- "Important"
count_other$type <- "Other"
ALL <- rbind(count_important, count_other)
##----- Graph
graph <- rPlot(count ~ genetic_region, data = ALL, type = "point", color = "type",
tooltip = "#!function(item){ return item.tip }!#")
graph$guides(x = list(title = "Genetic region"))
graph$guides(y = list(title = "Number of mutations"))
graph$guides(y = list(min = 0, max = 5))
graph$guides(x = list(numticks = length(gr[[selected_drug]])))
graph$guides(x = list(levels = gr[[selected_drug]]))
# graph
##----- Save graph to HTML file
graph$save(paste("scatterplot/scatterplot", selected_strain, selected_drug, "html", sep = "."), standalone = TRUE)
}
}
}
library(jsonlite)
library(tidyr)
library(rCharts)
library(ggvis)
install.packages('tidyr')
library(tidyr)
install.packages('dplyr')
